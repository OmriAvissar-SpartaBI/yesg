{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataFactory-Polli"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"Data_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\omria\\Desktop\\Farid\\"
		},
		"Data_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "OmriComputer\\Omri Avissar"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RS_ETL_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RS_ETL_Source1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RS_ETL_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RS_ETL_Target1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/contoso')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/contoso_temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/farid')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "farid",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "currencyexchange.csv",
						"container": "farid"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Date",
						"type": "String"
					},
					{
						"name": "FromCurrency",
						"type": "String"
					},
					{
						"name": "ToCurrency",
						"type": "String"
					},
					{
						"name": "Exchange",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Data_properties_typeProperties_host')]",
					"userId": "[parameters('Data_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "Pass"
					}
				},
				"connectVia": {
					"referenceName": "onprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF Pipeline Run Synced Example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute ADF Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Execute ADF Pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"AdfSubscriptionId": "fc8e1aad-9949-42ee-93fd-8e79d12716e5",
								"AdfResourceGroupName": "RG-DataFactory-Test",
								"PipelineRunStatusPollingIntervalInSeconds": 10,
								"PipelineParametersObject": "{\"FailureFlag\":false,\"NumOfSeconds\":10}",
								"AdfResourceName": "DataFactory-Farid",
								"AdfPipelineName": "pipeline1"
							}
						}
					},
					{
						"name": "ReturnValueString",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute ADF Pipeline",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ReturnValueString",
							"value": {
								"value": "@if(contains(activity('Execute ADF Pipeline').output.pipelineReturnValue,'ReturnValueObject'),string(activity('Execute ADF Pipeline').output.pipelineReturnValue.ReturnValueObject),null)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineRunId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute ADF Pipeline",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunId",
							"value": {
								"value": "@if(contains(activity('Execute ADF Pipeline').output.pipelineReturnValue,'PipelineRunId'),activity('Execute ADF Pipeline').output.pipelineReturnValue.PipelineRunId,null)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "PipelineRunFailedString",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute ADF Pipeline",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PipelineRunFailedString",
							"value": {
								"value": "@if(contains(activity('Execute ADF Pipeline').output.pipelineReturnValue,'PipelineRunFailedString'),activity('Execute ADF Pipeline').output.pipelineReturnValue.PipelineRunFailedString,null)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ReturnValueString": {
						"type": "String"
					},
					"PipelineRunId": {
						"type": "String"
					},
					"PipelineRunFailedString": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Execute ADF Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-21T07:39:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ADF Pipelines Runs Asynced Example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Pipelines Details to run",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select *\nfrom\n(\nVALUES\n(\n 'a'\n,'fc8e1aad-9949-42ee-93fd-8e79d12716e5'\n,'RG-DataFactory-Test'\n,'{\"FailureFlag\":true,\"NumOfSeconds\":10}'\n,'DataFactory-Farid'\n,'pipeline11'\n),\n(\n 'b'\n,'fc8e1aad-9949-42ee-93fd-8e79d12716e5'\n,'RG-DataFactory-Test'\n,null\n,'DataFactory-Farid'\n,'pipeline2'\n)\n)\nas AdfPipelinesToRun\n(\n [PipelineWithParametersKey]\n,[AdfSubscriptionId]\n,[AdfResourceGroupName]\n,[PipelineParametersObject]\n,[AdfResourceName]\n,[AdfPipelineName]\n)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Execute each Pipeline",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Pipelines Details to run",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@if(equals(activity('Get Pipelines Details to run').output.resultSetCount,0),variables('EmptyArray'),activity('Get Pipelines Details to run').output.resultSets[0].rows)",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute ADF Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Execute ADF Pipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"AdfSubscriptionId": {
												"value": "@item().AdfSubscriptionId",
												"type": "Expression"
											},
											"AdfResourceGroupName": {
												"value": "@item().AdfResourceGroupName",
												"type": "Expression"
											},
											"PipelineRunStatusPollingIntervalInSeconds": 10,
											"PipelineParametersObject": {
												"value": "@json(coalesce(item().PipelineParametersObject,''))",
												"type": "Expression"
											},
											"AdfResourceName": {
												"value": "@item().AdfResourceName",
												"type": "Expression"
											},
											"AdfPipelineName": {
												"value": "@item().AdfPipelineName",
												"type": "Expression"
											},
											"WaitForCompletionFlag": false
										}
									}
								},
								{
									"name": "PipelineRunExecutionLog",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute ADF Pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "PipelineRunExecutionLog",
										"value": {
											"value": "@concat('PipelineWithParametersKey: ',string(item().PipelineWithParametersKey),'; PipelineRunId: ',if(contains(activity('Execute ADF Pipeline').output.pipelineReturnValue,'PipelineRunId'),activity('Execute ADF Pipeline').output.pipelineReturnValue.PipelineRunId,''))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"PipelineRunExecutionLog": {
						"type": "String"
					},
					"EmptyArray": {
						"type": "Array",
						"defaultValue": []
					}
				},
				"folder": {
					"name": "Execute ADF Pipeline"
				},
				"annotations": [],
				"lastPublishTime": "2023-05-21T07:39:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_CopyViewToTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy from source to target",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate target if exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:20:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": true,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RS_ETL_Source",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@pipeline().parameters.Source_SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.Source_ViewName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "RS_ETL_Target",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@pipeline().parameters.Target_SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.Taget_TableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check if target exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Run stored procedure if requested",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "RS_ETL_Target",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": {
										"value": "@pipeline().parameters.Target_SchemaName",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.Taget_TableName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							]
						}
					},
					{
						"name": "Truncate target if exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check if target exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Check if target exists').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Truncate target",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:01:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('truncate table [',pipeline().parameters.Target_SchemaName,'].[',pipeline().parameters.Taget_TableName,']')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Run stored procedure if requested",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(empty(pipeline().parameters.Optional_PreRunSp_Name))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Run stored procedure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:20:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@concat('[',pipeline().parameters.Optional_PreRunSp_SchemaName,'].[',pipeline().parameters.Optional_PreRunSp_Name,']')",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Source_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Source_ViewName": {
						"type": "string"
					},
					"Target_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Taget_TableName": {
						"type": "string"
					},
					"Optional_PreRunSp_SchemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"Optional_PreRunSp_Name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-24T11:03:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RS_ETL_Source')]",
				"[concat(variables('factoryId'), '/datasets/RS_ETL_Target')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Data",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().Directory",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_Main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get PowerBI View Names",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select\n [SchemaName] = schema_name(v.schema_id)\n,[ViewName] = v.name\n,[TableName] = substring(v.name,4,len(v.name)-3)\nfrom sys.views v\nwhere schema_name(v.schema_id) = 'powerbi'"
								}
							]
						}
					},
					{
						"name": "Copy all PowerBI Views To Tables",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get PowerBI View Names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get PowerBI View Names').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute Pipeline_CopyViewToTable",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Pipeline_CopyViewToTable",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Source_SchemaName": {
												"value": "@item().SchemaName",
												"type": "Expression"
											},
											"Source_ViewName": {
												"value": "@item().ViewName",
												"type": "Expression"
											},
											"Target_SchemaName": {
												"value": "@item().SchemaName",
												"type": "Expression"
											},
											"Taget_TableName": {
												"value": "@item().TableName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-05-24T11:03:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_CopyViewToTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger2')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline_CopyViewToTable",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 15,
						"startTime": "2022-05-21T12:25:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Pipeline_CopyViewToTable')]"
			]
		}
	]
}